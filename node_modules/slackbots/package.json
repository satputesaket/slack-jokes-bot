{
  "_args": [
    [
      {
        "raw": "slackbots",
        "scope": null,
        "escapedName": "slackbots",
        "name": "slackbots",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/asus/nodeProjects/slack-jokes-bot"
    ]
  ],
  "_from": "slackbots@latest",
  "_id": "slackbots@1.1.0",
  "_inCache": true,
  "_location": "/slackbots",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/slackbots-1.1.0.tgz_1505483062942_0.992632998386398"
  },
  "_npmUser": {
    "name": "mishk0",
    "email": "mokrushin.ms@ya.ru"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "slackbots",
    "scope": null,
    "escapedName": "slackbots",
    "name": "slackbots",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/slackbots/-/slackbots-1.1.0.tgz",
  "_shasum": "e028c0914a23f87600cc51cafb3ad441a4b87bd7",
  "_shrinkwrap": null,
  "_spec": "slackbots",
  "_where": "/home/asus/nodeProjects/slack-jokes-bot",
  "author": {
    "name": "Mikhail Mokrushin",
    "email": "mokrushin.ms@ya.ru"
  },
  "bugs": {
    "url": "https://github.com/mishk0/slack-bot-api/issues"
  },
  "dependencies": {
    "extend": "^2.0.1",
    "lodash": "^4.17.2",
    "request": "^2.56.0",
    "vow": "^0.4.9",
    "ws": "^1.0.1"
  },
  "description": "Simple API for Slack",
  "devDependencies": {
    "chai": "^2.3.0",
    "jscs": "^1.13.1",
    "jshint": "^2.8.0",
    "mocha": "^2.2.5",
    "sinon": "^1.14.1",
    "sinon-chai": "^2.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-dpxdOYe0UME98MOXHzfWEaD2SRhvUucGnyupm+I1pUNYOHmDUPyBVmWJigQKGsdCvy6f1jWdk976BM33VPgHOw==",
    "shasum": "e028c0914a23f87600cc51cafb3ad441a4b87bd7",
    "tarball": "https://registry.npmjs.org/slackbots/-/slackbots-1.1.0.tgz"
  },
  "gitHead": "9bfa3d46c585a878fe82cb5d5c5380534a51295c",
  "homepage": "https://github.com/mishk0/slack-bot-api",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mishk0",
      "email": "mokrushin.ms@ya.ru"
    }
  ],
  "name": "slackbots",
  "optionalDependencies": {},
  "readme": "# SlackBots.js\n[![license](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://raw.githubusercontent.com/mishk0/slack-bot-api/master/LICENSE)\n[![Build Status](https://travis-ci.org/mishk0/slack-bot-api.svg?branch=master)](https://travis-ci.org/mishk0/slack-bot-api)\n[![npm](https://img.shields.io/npm/v/slackbots.svg?style=flat)](https://www.npmjs.com/package/slackbots)\n\nThis is Node.js library for easy operation with Slack API.\n\nIt also exposes all opportunities of <a href=\"https://api.slack.com/rtm\">Slack's Real Time Messaging API</a>.\n\n## Installation\n\n```\nnpm install slackbots\n```\n\n### Events\n\n- `start` - event fired, when Real Time Messaging API is started (via websocket),\n- `message` - event fired, when something happens in Slack. Description of all events <a href=\"https://api.slack.com/rtm\">here</a>,\n- `open` - websocket connection is open and ready to communicate,\n- `close` - websocket connection is closed.\n- `error` - an error occurred while connecting to Slack\n\n### Methods\n\n- `getChannels()` (return: promise) - returns a list of all channels in the team,\n- `getGroups()` (return: promise) - returns a list of all groups in the team,\n- `getUsers()` (return: promise) - returns a list of all users in the team,\n- `getImChannels()` (return: promise) - returns a list of bots direct message channels in the team,\n- `getChannel(name)` (return: promise) - gets channel by name,\n- `getGroup(name)` (return: promise) - gets group by name,\n- `getUser(name)` (return: promise) - gets user by name,\n- `getUserByEmail(name)` (return: promise) - gets user by name,\n- `getChannelId(name)` (return: promise) - gets channel ID by name,\n- `getGroupId(name)` (return: promise) - gets group ID by name,\n- `getUserId(name)` (return: promise) - gets user ID by name,\n- `getChatId(name)` (return: promise) - it returns or opens and returns a direct message channel ID,\n- `postEphemeral(id, user, text, params)` (return: promise) - posts an ephemeral message to channel and user by ID,\n- `postMessage(id, text, params)` (return: promise) - posts a message to channel | group | user by ID,\n- `updateMessage(channelId, timestamp, text, params)` (return: promise) - updates a message in a channel,\n- `postTo(name, message [, params, callback])` (return: promise) - posts a message to channel | group | user by name,\n- `postMessageToUser(name, message [, params, callback])` (return: promise) - posts a direct message by user name,\n- `postMessageToGroup(name, message [, params, callback])` (return: promise) - posts a message to private group by name,\n- `postMessageToChannel(name, message [, params, callback])` (return: promise) - posts a message to channel by name.\n- `openIm(userId)` (return: promise) - opens a direct message channel with another member in the team\n\n## Usage\n```js\nvar SlackBot = require('slackbots');\n\n// create a bot\nvar bot = new SlackBot({\n    token: 'xoxb-012345678-ABC1DFG2HIJ3', // Add a bot https://my.slack.com/services/new/bot and put the token \n    name: 'My Bot'\n});\n\nbot.on('start', function() {\n    // more information about additional params https://api.slack.com/methods/chat.postMessage\n    var params = {\n        icon_emoji: ':cat:'\n    };\n    \n    // define channel, where bot exist. You can adjust it there https://my.slack.com/services \n    bot.postMessageToChannel('general', 'meow!', params);\n    \n    // define existing username instead of 'user_name'\n    bot.postMessageToUser('user_name', 'meow!', params); \n    \n    // If you add a 'slackbot' property, \n    // you will post to another user's slackbot channel instead of a direct message\n    bot.postMessageToUser('user_name', 'meow!', { 'slackbot': true, icon_emoji: ':cat:' }); \n    \n    // define private group instead of 'private_group', where bot exist\n    bot.postMessageToGroup('private_group', 'meow!', params); \n});\n```\nPROFIT!\n<img src=\"http://i.imgur.com/hqzTXHm.png\" />\n\n```js\n/**\n * @param {object} data\n */\nbot.on('message', function(data) {\n    // all ingoing events https://api.slack.com/rtm\n    console.log(data);\n});\n```\n\n###Response Handler\nThe simplest way for handling response is callback function, which is specified as a last argument:\n```js\nbot.postMessageToUser('user1', 'hi', function(data) {/* ... */});\nbot.postMessageToUser('user1', 'hi', params, function(data) {/* ... */});\n```\n\nBut also you can use promises.\n\nError:\n```js\nbot.postMessageToUser('user1', 'hi').fail(function(data) {\n    //data = { ok: false, error: 'user_not_found' }\n})\n```\nSuccess:\n```js\nbot.postMessageToUser('user', 'hi').then(function(data) {\n    // ...\n})\n```\nError and Success:\n```js\nbot.postMessageToUser('user', 'hi').always(function(data) {\n    // ...\n})\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mishk0/slack-bot-api.git"
  },
  "scripts": {
    "test": "./node_modules/jshint/bin/jshint index.js && ./node_modules/jscs/bin/jscs index.js && ./node_modules/mocha/bin/mocha"
  },
  "version": "1.1.0"
}
